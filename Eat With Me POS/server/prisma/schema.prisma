generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Vendor {
  id         String       @id @default(uuid())
  restaurant Restaurant[]
  email      String       @unique
  password   String
  name       String
  country    String?
  plan       String?
  useRedis   Boolean      @default(false) // ðŸ”„ toggle live order cache
  createdAt  DateTime     @default(now())
}

model Restaurant {
  id        String   @id @default(uuid())
  name      String
  address   String
  location  String
  phone     String
  vendorId  String
  vendor    Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  menus     Menu[]
  orders    Order[]
  staff     Staff[]
  tables    Table[]
  settings  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Table {
  id           String     @id @default(uuid())
  tableNumber  Int
  capacity     Int?
  status       String     @default("AVAILABLE") // AVAILABLE | OCCUPIED | RESERVED
  orders       Order[]    @relation("TableOrders") // âœ… one-to-many
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Menu {
  id           String     @id @default(uuid())
  name         String
  price        Float
  category     String?
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Order {
  id           String      @id @default(uuid())
  restaurantId String
  vendorId     String
  totalAmount  Float
  status       String      @default("PENDING")
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  items        OrderItem[]
  tableId      String?
  table        Table?      @relation("TableOrders", fields: [tableId], references: [id]) // âœ… many orders per table
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  name      String
  price     Float
  quantity  Int
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Staff {
  id           String     @id @default(uuid())
  name         String
  role         String
  email        String?
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
}
