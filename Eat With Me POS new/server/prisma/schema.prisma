generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Vendor {
  id         String       @id @default(uuid())
  restaurant Restaurant[]
  email      String       @unique
  password   String
  name       String
  country    String?
  plan       String?
  role       String?      @default("Manager")
  useRedis   Boolean      @default(false)
  createdAt  DateTime     @default(now())
}

model Restaurant {
  id        String   @id @default(uuid())
  name      String
  address   String
  location  String
  phone     String
  vendorId  String
  vendor    Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  menus     Menu[]
  orders    Order[]
  staff     Staff[]
  tables    Table[]
  settings  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Table {
  id           String     @id @default(uuid())
  tableNumber  Int        @unique
  capacity     Int?
  status       String     @default("AVAILABLE") // AVAILABLE | OCCUPIED | RESERVED | CLEANING
  waiter       String?
  customer     String?
  orderAmount  Float?     @default(0)
  timeOccupied String? // can store as formatted string or use DateTime if preferred
  guests       Int?       @default(0)
  orders       Order[]    @relation("TableOrders")
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Menu {
  id           String     @id @default(uuid())
  name         String
  price        Float
  category     String?
  description  String?
  available    Boolean    @default(true)
  isVeg        Boolean    @default(true)
  spiceLevel   String?
  cookingTime  Int?
  isPopular    Boolean    @default(false)
  allergens    String[]   @default([])
  calories     Int?
  protein      Int?
  carbs        Int?
  fat          Int?
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Order {
  id           String      @id @default(uuid())
  restaurantId String
  vendorId     String
  totalAmount  Float
  status       String      @default("PENDING")
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  items        OrderItem[]
  tableId      String?
  table        Table?      @relation("TableOrders", fields: [tableId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  name      String
  price     Float
  quantity  Int
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Staff {
  id             String           @id @default(uuid())
  name           String
  roleName       String
  phone          String           @unique
  email          String?          @unique
  pin            String
  salary         Float
  isActive       Boolean          @default(true)
  joinDate       DateTime         @default(now())
  currentShift   String?
  performance    Performance?     @relation(name: "PerformanceStaff")
  paymentHistory PaymentHistory[]
  shifts         Shift[]
  restaurantId   String
  restaurant     Restaurant       @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  roleId         String?
  role           Role?            @relation(fields: [roleId], references: [id])
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model Shift {
  id          String    @id @default(uuid())
  staffId     String
  staff       Staff     @relation(fields: [staffId], references: [id])
  shiftType   String // Morning, Evening, Night
  startTime   DateTime
  endTime     DateTime?
  openingCash Float?
  closingCash Float?
  totalSales  Float?    @default(0)
  tips        Float?    @default(0)
  status      String // Active, Completed
  date        DateTime  @default(now())
}

model PaymentHistory {
  id          String   @id @default(uuid())
  staffId     String
  staff       Staff    @relation(fields: [staffId], references: [id])
  amount      Float
  paymentDate DateTime @default(now())
  paymentType String // Full Salary, Partial, Bonus, Overtime
  description String?
  paidBy      String?
  status      String   @default("Completed")
  month       String?
  year        Int?
}

model Performance {
  id              String   @id @default(uuid())
  staffId         String   @unique
  staff           Staff    @relation(name: "PerformanceStaff", fields: [staffId], references: [id])
  ordersHandled   Int      @default(0)
  avgOrderTimeMin Int      @default(0)
  customerRating  Float    @default(5)
  totalSalary     Float    @default(0)
  baseSalary      Float    @default(0)
  allowances      Float    @default(0)
  overtime        Float    @default(0)
  deductions      Float    @default(0)
  joinDate        DateTime @default(now())
}

model Role {
  id          String       @id @default(uuid())
  name        String       @unique
  description String?
  permissions Permission[] @relation("RolePermissions")
  staff       Staff[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Permission {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  roles       Role[]  @relation("RolePermissions")
}
